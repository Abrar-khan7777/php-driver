// vim:ft=javascript

ARG_ENABLE("cassandra", "Enable DataStax PHP Cassandra extension", "no");

if (PHP_CASSANDRA != "no") {
  // Allow for DataStax C/C++ and libuv default locations to be overridden
  ARG_WITH("cassandra-cpp-driver", "Where to find DataStax C/C++ driver", "yes");
  ARG_WITH("libuv", "Where to find libuv libraries", "yes");

  if (CHECK_LIB("cassandra_static.lib", "cassandra", PHP_CASSANDRA_CPP_DRIVER) &&
      CHECK_HEADER_ADD_INCLUDE("cassandra.h", "CFLAGS_CASSANDRA", PHP_CASSANDRA_CPP_DRIVER + "/include")) {
    if (CHECK_LIB("libuv.lib", "cassandra", PHP_LIBUV) &&
        CHECK_LIB("iphlpapi.lib", "cassandra") &&
        CHECK_LIB("psapi.lib", "cassandra") &&
        CHECK_LIB("userenv.lib", "cassandra") && // Required for libuv v1.6.0+
        CHECK_LIB("ws2_32.lib", "cassandra") &&
        CHECK_LIB("wsock32.lib", "cassandra") &&
        CHECK_HEADER_ADD_INCLUDE("uv.h", "CFLAGS_CASSANDRA", PHP_LIBUV + "/include")) {

      // Indicate the DataStax C/C++ driver and dependencies are available
      AC_DEFINE("HAVE_CASSANDRA_CPP_DRIVER", 1, "Have DataStax C/C++ driver");
      AC_DEFINE("HAVE_LIBUV", 1, "Have libuv");

      if (CHECK_LIB("libeay32.lib", "cassandra") && CHECK_LIB("ssleay32.lib", "cassandra")) {
        if (!CHECK_LIB("zlib_a.lib", "cassandra")) {
          WARNING("Unable to Locate zlib Library: Cassandra extension may not link correctly");
        }
      } else {
        ERROR("Unable to Locate OpenSSL Libraries: https://wiki.php.net/internals/windows/stepbystepbuild");
      }

      if (CHECK_LIB("mpir_a.lib", "cassandra") &&
        CHECK_HEADER_ADD_INCLUDE("gmp.h", "CFLAGS_CASSANDRA", PHP_GMP +  ";" + PHP_PHP_BUILD + "\\include\\mpir")) {
        if (ADD_EXTENSION_DEP("cassandra", "spl")) {
          EXTENSION("cassandra", "php_cassandra.c");

          ADD_SOURCES(configure_module_dirname + "/src",
              "Cassandra.c", "cassandra");
          ADD_SOURCES(configure_module_dirname + "/src/Cassandra",
              "BatchStatement.c " +
              "Bigint.c " +
              "Blob.c " +
              "Cluster.c " +
              "Collection.c " +
              "Column.c " +
              "Decimal.c " +
              "DefaultCluster.c " +
              "DefaultColumn.c " +
              "DefaultKeyspace.c " +
              "DefaultSchema.c " +
              "DefaultSession.c " +
              "DefaultTable.c " +
              "Exception.c " +
              "ExecutionOptions.c " +
              "Float.c " +
              "Future.c " +
              "FutureClose.c " +
              "FuturePreparedStatement.c " +
              "FutureRows.c " +
              "FutureSession.c " +
              "FutureValue.c " +
              "Inet.c " +
              "Keyspace.c " +
              "Map.c " +
              "Numeric.c " +
              "PreparedStatement.c " +
              "Rows.c " +
              "Schema.c " +
              "Session.c " +
              "Set.c " +
              "SimpleStatement.c " +
              "SSLOptions.c " +
              "Statement.c " +
              "Table.c " +
              "Timestamp.c " +
              "Timeuuid.c " +
              "Type.c " +
              "TimestampGenerator.c " +
              "Uuid.c " +
              "UuidInterface.c " +
              "Value.c " +
              "Varint.c", "cassandra");
          ADD_SOURCES(configure_module_dirname + "/src/Cassandra/Cluster",
              "Builder.c", "cassandra");
          ADD_SOURCES(configure_module_dirname + "/src/Cassandra/Exception",
              "AlreadyExistsException.c " +
              "AuthenticationException.c " +
              "ConfigurationException.c " +
              "DivideByZeroException.c " +
              "DomainException.c " +
              "ExecutionException.c " +
              "InvalidArgumentException.c " +
              "InvalidQueryException.c " +
              "InvalidSyntaxException.c " +
              "IsBootstrappingException.c " +
              "LogicException.c " +
              "OverloadedException.c " +
              "ProtocolException.c " +
              "RangeException.c " +
              "ReadTimeout.c " +
              "RuntimeException.c " +
              "ServerException.c " +
              "TimeoutException.c " +
              "TruncateException.c " +
              "UnauthorizedException.c " +
              "UnavailableException.c " +
              "UnpreparedException.c " +
              "ValidationException.c " +
              "WriteTimeoutException.c", "cassandra");
          ADD_SOURCES(configure_module_dirname + "/src/Cassandra/SSLOptions",
              "Builder.c", "cassandra");
          ADD_SOURCES(configure_module_dirname + "/src/Cassandra/Type",
              "Collection.c " +
              "Custom.c " +
              "Map.c " +
              "Scalar.c " +
              "Set.c", "cassandra");
          ADD_SOURCES(configure_module_dirname + "/src/Cassandra/TimestampGenerator",
              "Monotonic.c " +
              "ServerSide.c");

          ADD_SOURCES(configure_module_dirname + "/util",
              "bytes.c " +
              "collections.c " +
              "consistency.c " +
              "future.c " +
              "hash.c " +
              "inet.c " +
              "math.c " +
              "ref.c " +
              "result.c " +
              "types.c " +
              "uuid_gen.c", "cassandra");

          ADD_FLAG("LDFLAGS_CASSANDRA",
              "/INCREMENTAL:NO " +
              "/LTCG " +
              "/NODEFAULTLIB:LIBCMT.LIB " +
              "/NODEFAULTLIB:LIBCMTD.LIB");
          ADD_FLAG("CFLAGS_CASSANDRA",
              "/I " + configure_module_dirname + " " +
              "/I " + PHP_CASSANDRA_CPP_DRIVER + "/include " +
              "/I " + PHP_LIBUV + "/include " +
              "/I " + configure_module_dirname + "/src " +
              "/DCASS_STATIC " +
              "/wd4267");

          // Determine if MSVC++ stdint definitions should be disabled
          if (PHP_VERSION == "5" && PHP_MINOR_VERSION <= 4) {
            ADD_FLAG("CFLAGS_CASSANDRA",
                "/DDISABLE_MSVC_STDINT");
          }

          // Ensure gdi32.lib is linked for all dependency extensions
          ADD_FLAG("LIBS", "gdi32.lib"); // This is needed for vc_build.bat

          AC_DEFINE("HAVE_CASSANDRA_EXT", PHP_CASSANDRA_SHARED ? 0 : 1, "Have DataStax PHP driver extension");
        } else {
          ERROR("Unable to Add Dependency SPL: This should never happen (SPL is part of PHP core)");
        }
      } else {
        ERROR("Unable to Locate MPIR (GMP) Library/Headers: https://wiki.php.net/internals/windows/stepbystepbuild");
      }
    } else {
      ERROR("Unable to Locate libuv Library/Header: https://wiki.php.net/internals/windows/stepbystepbuild");
    }
  } else {
    ERROR("Unable to Locate DataStax C/C++ driver Library/Header: https://wiki.php.net/internals/windows/stepbystepbuild");
  }
}
